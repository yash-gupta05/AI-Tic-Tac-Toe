{"version":3,"sources":["Grid.js","ticTacToe/minMax.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","position","flexGrow","paper","height","width","backgroundColor","borderColor","borderRadius","paperFlash","textO","textAlign","fontSize","color","fontStyle","textX","Grid9","grid","clickHandler","flashIndices","classes","Grid","className","style","map","start","Row","key","Array","from","length","_","i","index","value","textClass","paperClass","includes","Col","xs","Paper","variant","onClick","renderCell","minimax","newBoard","player","depth","availSpots","emptyIndexies","winning","HUMAN_PLAYER_SYMBOL","score","AI_PLAYER_SYMBOL","bestMove","moves","move","result","push","bestScore","board","filter","s","mapPlayer","ai","human","App","useState","setGrid","setPlayer","setDepth","submit","setSubmit","win","setWin","setFlashIndices","setMove","showSuggestion","setShowSuggestion","setDepthFn","evtKey","Number","setPlayerFn","updateGrid","newGrid","getFlashIndices","handleShow","useEffect","suggestedMove","setSuggestMove","aiMove","handleDShow","currentGrid","combo","show","setShow","handleClose","showD","setShowD","handleDClose","Container","Jumbotron","CardDeck","Card","border","Body","DropdownButton","id","title","size","marginRight","Dropdown","Item","as","eventKey","onSelect","Title","ListGroup","ListGroupItem","Button","alignItems","Modal","onHide","Header","closeButton","Footer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.49be322a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    position: \"absolute\",\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    height: 96.5,\r\n    width: 98,\r\n    backgroundColor: \"white\",\r\n    borderColor: \"black\",\r\n    borderRadius: 0,\r\n  },\r\n  paperFlash: {\r\n    height: 96.5,\r\n    width: 98,\r\n    backgroundColor: \"pink\",\r\n    borderColor: \"black\",\r\n    borderRadius: 0,\r\n  },\r\n  textO: {\r\n    textAlign: \"center\",\r\n    fontSize: 50,\r\n    color: \"purple\",\r\n    fontStyle: \"roman\",\r\n  },\r\n  textX: {\r\n    textAlign: \"center\",\r\n    fontSize: 50,\r\n    color: \"red\",\r\n    fontStyle: \"roman\",\r\n  },\r\n}));\r\n\r\nconst Grid9 = ({ grid, clickHandler, flashIndices = [] }) => {\r\n  const classes = useStyles();\r\n\r\n  const renderCell = (index) => {\r\n    const value = grid[index] === \"O\" || grid[index] === \"X\" ? grid[index] : \"\";\r\n    const textClass = value === \"O\" ? classes.textO : classes.textX;\r\n    const paperClass = flashIndices.includes(index) ? classes.paperFlash : classes.paper;\r\n\r\n    return (\r\n      <Col xs={3} key={index}>\r\n        <Paper\r\n          className={paperClass}\r\n          variant=\"outlined\"\r\n          onClick={() => clickHandler(index)}\r\n        >\r\n          <p className={textClass}>{value}</p>\r\n        </Paper>\r\n      </Col>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Grid className={classes.root}>\r\n      <Grid style={{ width: \"20rem\" }}>\r\n        {[0, 3, 6].map((start) => (\r\n          <Row key={start}>\r\n            {Array.from({ length: 3 }, (_, i) => renderCell(start + i))}\r\n          </Row>\r\n        ))}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Grid9;\r\n","import {HUMAN_PLAYER_SYMBOL, AI_PLAYER_SYMBOL} from \"../App\";\r\n\r\nexport function minimax(newBoard, player, depth) \r\n{\r\n        //available spots array\r\n        var availSpots = emptyIndexies(newBoard);\r\n\r\n        // checks for the terminal states such as win, lose, and tie and returning a value accordingly\r\n        if (winning(newBoard, HUMAN_PLAYER_SYMBOL)) \r\n        {\r\n            return {score: -10};\r\n        } \r\n        else if (winning(newBoard, AI_PLAYER_SYMBOL))\r\n        {\r\n            return {score: 10};\r\n        } \r\n        else if (availSpots.length === 0) \r\n        {\r\n            return {score: 0};\r\n        }\r\n        if (depth === 0) \r\n        {\r\n            return {score: 0};\r\n        }\r\n\r\n        // an array to collect all the objects\r\n        var moves = [];\r\n\r\n        // loop through available spots\r\n        for (var i = 0; i < availSpots.length; i++)\r\n        {\r\n            //create an object for each and store the index of that spot that was stored as a number in the object's index key\r\n                var move = {};\r\n                move.index = newBoard[availSpots[i]];\r\n\r\n                // set the empty spot to the current player\r\n                newBoard[availSpots[i]] = player;\r\n\r\n                //if collect the score resulted from calling minimax on the opponent of the current player\r\n                if (player === AI_PLAYER_SYMBOL) \r\n                {\r\n                    var result = minimax(newBoard, HUMAN_PLAYER_SYMBOL,depth--);\r\n                    move.score = result.score;\r\n                } \r\n                else \r\n                {\r\n                    var result = minimax(newBoard, AI_PLAYER_SYMBOL,depth--);\r\n                    move.score = result.score;\r\n                }\r\n\r\n                //reset the spot to empty\r\n                newBoard[availSpots[i]] = move.index;\r\n\r\n                // push the all possible like out of 4 nodes 2 are  objects to the array\r\n                moves.push(move);\r\n        }\r\n\r\n        // if it is the computer's turn loop over the moves and choose the move with the highest score\r\n        var bestMove;\r\n        if (player === AI_PLAYER_SYMBOL) \r\n        {\r\n            var bestScore = -10000;\r\n            for (var i = 0; i < moves.length; i++) \r\n            {\r\n                if (moves[i].score > bestScore)\r\n                {\r\n                    bestScore = moves[i].score;\r\n                    bestMove = i;\r\n                }\r\n            }\r\n        } \r\n        // else loop over the moves and choose the move with the lowest score\r\n        else\r\n         {\r\n            var bestScore = 10000;\r\n            for (var i = 0; i < moves.length; i++) \r\n            {\r\n                if (moves[i].score < bestScore) \r\n                {\r\n                    bestScore = moves[i].score;\r\n                    bestMove = i;\r\n                }\r\n            }\r\n        }\r\n\r\n        // return the chosen move (object) from the array to the higher depth\r\n        return moves[bestMove];\r\n}\r\n\r\n// //1.returns the available spots on the board/grid\r\nexport function emptyIndexies(board) {\r\n    return board.filter(s => s !== \"O\" && s !== \"X\");\r\n}\r\n\r\n// winning combinations using the board indexies for instance the first win could be 3 xes in a row\r\nexport function winning(board, player)\r\n{\r\n    if (\r\n        (board[0] === player && board[1] === player && board[2] === player) ||\r\n        (board[3] === player && board[4] === player && board[5] === player) ||\r\n        (board[6] === player && board[7] === player && board[8] === player) ||\r\n        (board[0] === player && board[3] === player && board[6] === player) ||\r\n        (board[1] === player && board[4] === player && board[7] === player) ||\r\n        (board[2] === player && board[5] === player && board[8] === player) ||\r\n        (board[0] === player && board[4] === player && board[8] === player) ||\r\n        (board[2] === player && board[4] === player && board[6] === player)\r\n    ) \r\n    {\r\n      return true;\r\n    } \r\n    else {\r\n        return false;\r\n    }\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Button, CardDeck, Container, Row, Card, Modal, DropdownButton, Dropdown, Jumbotron, ListGroup, ListGroupItem } from \"react-bootstrap\";\r\nimport Grid from \"./Grid\";\r\nimport { emptyIndexies, minimax, winning } from \"./ticTacToe/minMax\";\r\n\r\nexport const HUMAN_PLAYER = \"human\";\r\nexport const AI_PLAYER = \"ai\";\r\nexport const HUMAN_PLAYER_SYMBOL = \"O\";\r\nexport const AI_PLAYER_SYMBOL = \"X\";\r\n\r\nconst mapPlayer = {\r\n  ai: \"Computer\",\r\n  human: \"Human\"\r\n};\r\n\r\nfunction App() {\r\n  const [grid, setGrid] = useState([0,1,2,3,4,5,6,7,8]);\r\n  const [player, setPlayer] = useState(HUMAN_PLAYER);\r\n  const [depth, setDepth] = useState(1);\r\n  const [submit, setSubmit] = useState(false);\r\n  const [win, setWin] = useState(\"\");\r\n  const [flashIndices, setFlashIndices] = useState([]);\r\n  const [move, setMove] = useState(\"\");\r\n  const [showSuggestion, setShowSuggestion] = useState(false); // ✅ new state\r\n\r\n  const setDepthFn = (evtKey) => { setDepth(Number(evtKey)); setSubmit(false); };\r\n  const setPlayerFn = (evtKey) => {\r\n    setPlayer(evtKey);\r\n    setSubmit(false);\r\n    setGrid([0,1,2,3,4,5,6,7,8]);\r\n    setFlashIndices([]);\r\n  };\r\n\r\n  const onClick = (index) => {\r\n  if (grid[index] === \"X\" || grid[index] === \"O\") return;\r\n\r\n  updateGrid(index, HUMAN_PLAYER_SYMBOL);\r\n  setPlayer(AI_PLAYER);\r\n\r\n  // ✅ Turn off suggestion once move is made\r\n  setShowSuggestion(false);\r\n  setMove(\"\"); \r\n};\r\n\r\n\r\n  const updateGrid = (index, value) => {\r\n    const newGrid = [...grid];\r\n    newGrid[index] = value;\r\n    setGrid(newGrid);\r\n\r\n    if (winning(newGrid, HUMAN_PLAYER_SYMBOL)) {\r\n      getFlashIndices(newGrid);\r\n      setWin(HUMAN_PLAYER);\r\n      handleShow();\r\n      setMove(\"\");\r\n    }\r\n    if (winning(newGrid, AI_PLAYER_SYMBOL)) {\r\n      getFlashIndices(newGrid);\r\n      setWin(AI_PLAYER);\r\n      handleShow();\r\n      setMove(\"\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if(player === HUMAN_PLAYER && showSuggestion) {  // ✅ only if toggled ON\r\n      const tempGrid = [...grid];\r\n      const suggestedMove = minimax(tempGrid, HUMAN_PLAYER_SYMBOL, 100);\r\n      setSuggestMove(suggestedMove.index);\r\n    } else {\r\n      setMove(\"\"); // clear suggestion if OFF\r\n    }\r\n\r\n    if(player === AI_PLAYER) {\r\n      const tempGrid = [...grid];\r\n      const aiMove = minimax(tempGrid, AI_PLAYER_SYMBOL, depth);\r\n      updateGrid(aiMove.index, AI_PLAYER_SYMBOL);\r\n\r\n      if(aiMove.score === 0 && emptyIndexies(grid).length < 2) {\r\n        handleDShow();\r\n      }\r\n      setPlayer(HUMAN_PLAYER);\r\n    }\r\n  }, [submit, player, grid, depth, showSuggestion]); // ✅ include showSuggestion\r\n\r\n  const setSuggestMove = (value) => {\r\n    const mapping = [\r\n      \"1st row 1st col\", \"1st row 2nd col\", \"1st row 3rd col\",\r\n      \"2nd row 1st col\", \"2nd row 2nd col\", \"2nd row 3rd col\",\r\n      \"3rd row 1st col\", \"3rd row 2nd col\", \"3rd row 3rd col\"\r\n    ];\r\n    setMove(value >=0 && value < 9 ? mapping[value] : \"\");\r\n  };\r\n\r\n  function getFlashIndices(currentGrid) {\r\n    const combos = [\r\n      [0,1,2], [3,4,5], [6,7,8],\r\n      [0,3,6], [1,4,7], [2,5,8],\r\n      [0,4,8], [2,4,6]\r\n    ];\r\n    for(const combo of combos){\r\n      if(currentGrid[combo[0]] === currentGrid[combo[1]] &&\r\n         currentGrid[combo[1]] === currentGrid[combo[2]]) {\r\n        setFlashIndices(combo);\r\n        return;\r\n      }\r\n    }\r\n    setFlashIndices([]);\r\n  }\r\n\r\n  const [show, setShow] = useState(false);\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  const winModal = () => (\r\n    <Modal show={show} onHide={handleClose}>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>Game Ends</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{win === HUMAN_PLAYER ? \"Congratulations, you won!\" : \"Oops, you lost!\"}</Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"secondary\" onClick={handleClose}>Close</Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n\r\n  const [showD, setShowD] = useState(false);\r\n  const handleDClose = () => setShowD(false);\r\n  const handleDShow = () => setShowD(true);\r\n\r\n  const drawModal = () => (\r\n    <Modal show={showD} onHide={handleDClose}>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>Game Ends</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>Match Drawn!</Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"secondary\" onClick={handleDClose}>Close</Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n\r\n  const newGame = () => {\r\n    setSubmit(true);\r\n    setDepth(1);\r\n    setGrid([0,1,2,3,4,5,6,7,8]);\r\n    setPlayer(HUMAN_PLAYER);\r\n    setFlashIndices([]);\r\n    setShowSuggestion(false);   // ✅ reset suggestion toggle\r\n};\r\n\r\n\r\n  const borderLessCard = { border: 0, alignItems: 'center' };\r\n\r\n  return (\r\n    <Container className=\"p-4\">\r\n      <Jumbotron>\r\n        <h1>Hello, hooman!</h1>\r\n        <p>AI powered Tic-Tac-Toe Game.</p>\r\n      </Jumbotron>\r\n      <CardDeck>\r\n        <Card border=\"secondary\" style={{width: '18rem'}}>\r\n          <Card.Body>\r\n            <Row>\r\n              <DropdownButton id=\"dropdown-player\" title=\"Player\" variant=\"success\" size=\"lg\" style={{marginRight: 10}}>\r\n                <Dropdown.Item as=\"button\" eventKey={HUMAN_PLAYER} onSelect={setPlayerFn}>Human (O)</Dropdown.Item>\r\n                <Dropdown.Item as=\"button\" eventKey={AI_PLAYER} onSelect={setPlayerFn}>Computer (X)</Dropdown.Item>\r\n              </DropdownButton>\r\n              <DropdownButton id=\"dropdown-depth\" title=\"Depth/Level\" variant=\"info\" size=\"lg\" style={{marginRight: 10}}>\r\n                <Dropdown.Item as=\"button\" eventKey=\"1\" onSelect={setDepthFn}>Easy</Dropdown.Item>\r\n                <Dropdown.Item as=\"button\" eventKey=\"5\" onSelect={setDepthFn}>Medium</Dropdown.Item>\r\n                <Dropdown.Item as=\"button\" eventKey=\"100\" onSelect={setDepthFn}>Hard</Dropdown.Item>\r\n              </DropdownButton>\r\n            </Row>\r\n          </Card.Body>\r\n          <Card.Body>\r\n            <Card.Title>Selections Made</Card.Title>\r\n            <ListGroup className=\"list-group-flush\">\r\n              <ListGroupItem>Player: {mapPlayer[player]}</ListGroupItem>\r\n              <ListGroupItem>Depth: {depth !== 100 ? depth : \"MAX\"}</ListGroupItem>\r\n              <ListGroupItem>\r\n                Suggested Move: {showSuggestion ? move : \"\"}\r\n              </ListGroupItem>\r\n            </ListGroup>\r\n          </Card.Body>\r\n          <Card.Body className=\"d-flex flex-column\">\r\n          <Button \r\n            size=\"lg\" \r\n            variant={showSuggestion ? \"danger\" : \"success\"} \r\n            onClick={() => setShowSuggestion(!showSuggestion)}\r\n            className=\"mb-2 w-100\"   // ✅ full width + margin bottom\r\n          >\r\n            {showSuggestion ? \"Hide Suggestion\" : \"Show Suggestion\"}\r\n          </Button>\r\n\r\n          <Button \r\n            size=\"lg\" \r\n            variant=\"warning\" \r\n            onClick={newGame}\r\n            className=\"w-100\"        // ✅ full width\r\n          >\r\n            New Game\r\n          </Button>\r\n        </Card.Body>\r\n        </Card>\r\n        <Card style={borderLessCard}>\r\n          <Grid grid={grid} clickHandler={onClick} flashIndices={flashIndices}/>\r\n        </Card>\r\n        {show && winModal()}\r\n        {showD && drawModal()}\r\n      </CardDeck>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}